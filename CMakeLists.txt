#MACRO-----

MACRO(Check_Windows)
	LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake" "${CMAKE_SOURCE_DIR}/cmake-modules")
	IF(MSVC)
		INCLUDE(CreateLaunchers) #VS Debug
	ENDIF()
	MESSAGE("PATH = $ENV{PATH}\n")
ENDMACRO(Check_Windows)

#FUNCTION-----

#START-----
CMAKE_MINIMUM_REQUIRED(VERSION 3.2)
LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/Project")
SET(ProjectDir "Project")
Include(Project)

MESSAGE( STATUS "PROJECT_VERSION_MINOR" ${PROJECT_VERSION_MINOR})


if(WIN32)
	SET(WINDOWS_RC app.rc)
	CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/${ProjectDir}/${WINDOWS_RC}.in ${CMAKE_CURRENT_BINARY_DIR}/${WINDOWS_RC})
endif()
if(MINGW)
        set(CMAKE_RC_COMPILER_INIT windres)
        enable_language(RC)
        set(CMAKE_RC_COMPILE_OBJECT
                "<CMAKE_RC_COMPILER> <FLAGS> -O coff <DEFINES> -i <SOURCE> -o <OBJECT>")
endif()
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/${ProjectDir}/config.h.in ${CMAKE_CURRENT_BINARY_DIR}/config.h)
aux_source_directory(${ProjectDir} SRC_LIST)
MESSAGE( STATUS "CMAKE_CL_64: ${CMAKE_CL_64}")

IF(WIN32)
	Check_Windows()
ENDIF()

IF(Qt5Widgets_FOUND)
	SET(WIN32APP WIN32)
ENDIF()

MESSAGE("SRC_LIST =${SRC_LIST}\n")
#MESSAGE("test CMAKE_MODULE_PATH=${CMAKE_MODULE_PATH}")
#MESSAGE("test PROJECT_SOURCE_DIR=${PROJECT_SOURCE_DIR}")


SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${CMAKE_BUILD_TYPE}) #Set dll file and exe out path
set(CMAKE_INCLUDE_CURRENT_DIR ON)
ADD_SUBDIRECTORY("${ProjectDir}/CSVBase")
MESSAGE("SRC_LIST =${SRC_LIST}\n")

MESSAGE("CSVBase_INCLUDE_DIRS =${CSVBase_INCLUDE_DIRS}\n")
include_directories(${PROJECT_BINARY_DIR} ${CSVBase_INCLUDE_DIRS})
ADD_EXECUTABLE(${PROJECT_NAME} ${WIN32APP} ${SRC_LIST} ${CMAKE_CURRENT_BINARY_DIR}/${WINDOWS_RC})
target_link_libraries(${PROJECT_NAME} CSVBase)
SET(FIND_DLL_PATH "${CSVBase_BINARY_DIR};")

IF(WIN32)
	INSTALL(CODE "
		include(BundleUtilities)
		fixup_bundle(\"${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_BUILD_TYPE}/${PROJECT_NAME}${CMAKE_EXECUTABLE_SUFFIX}\" \"\" \"${FIND_DLL_PATH}\")
	" COMPONENT Runtime)
ENDIF()
